#include <iostream>
#include <bits/stdc++.h>
#include <algorithm>
#define lld long long int 
#define mod 1000000007
#define FIO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
void buildTree(int *a,int l,int r,int *tree,int index)
{
    if(l == r)
    {
        tree[index]=a[l];
        return ;
    }
    int m=(l+r)/2;
    buildTree(a,l,m,tree,2*index);
    buildTree(a,m+1,r,tree,2*index+1);
    tree[index]=(tree[2*index]+tree[2*index+1]);
    return ;
}
int query(int* tree,int tl,int tr,int ql,int qr,int index)
{
    //Complete Overlap
    if(tl>=ql && tr<=qr)
    {
        return tree[index];
    }
    if(tl > qr || tr < ql)
    {
        return 0;
    }
    int m=(tl+tr)/2;
    int leftAns=query(tree,tl,m,ql,qr,2*index);
    int rightAns=query(tree,m+1,tr,ql,qr,2*index+1);
    return leftAns+rightAns;
}
int main() 
{
    FIO
    int a[]={1,2,3,4,5,6};
    int n=sizeof(a)/sizeof(a[0]);
    int *tree=new int[4*n+1];
    buildTree(a,0,n-1,tree,1);
    // Query 
    int l,r;
    cin >> l >> r;
    cout<<query(tree,0,n-1,l,r,1)<<endl;
	return 0;
}
