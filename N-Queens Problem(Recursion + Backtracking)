#include <iostream>
#include <bits/stdc++.h>
#include <algorithm>
#define lld long long int 
#define mod 1000000007
using namespace std;
bool isSafe(int board[][100],int i,int j,int n)
{
    // CHECKING ALL THE ABOW ROW OF THIS COLUMN
    for(int row=0;row<i;row++)
    {
        if(board[row][j] == 1)
        {
            return false;
        }
    }
    // CHECKING THE LEFT DIAGONAL
    int x=i,y=j;
    while(x>=0 && y>=0)
    {
        if(board[x][y] == 1)
        {
            return false;
        }
        x--;
        y--;
    }
    x=i;
    y=j;
    //CHECKING TOP RIGHT DIAGONAL
    while(x >=0 && y < n)
    {
        if(board[x][y] == 1)
        {
            return false;
        }
        x--;
        y++;
    }
    return true;
}
// WE ARE PLACING QUEENS ROW BY ROW SO PASSING ROW NUMBER AS PARAMETER i.e i
bool solveNQueens(int board[][100],int i,int n)
{
    // BASE CASE WE HAVE PLACED ALL THE QUEENS
    if(i == n)
    {
        // PRINTING BOARD
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j] == 1)
                {
                    cout<<"Q ";
                }
                else
                {
                    cout<<"_ ";
                }
            }
            cout<<endl;
        }
        cout<<endl;
    // IF WE RETURN TRUE BELOW RECURSION STOPS AT FIRST CORRECT CONFIGURATION 
    return false;
    }
    else
    {
        for(int j=0;j<n;j++)
        {
            // CHECKING WHETHER IT IS SAFE TO PLACE A QUEEN 
            if(isSafe(board,i,j,n))
            {
                board[i][j]=1;
                bool nextQueenplaceable=solveNQueens(board,i+1,n);
                if(nextQueenplaceable)
                {
                    return true;
                }
            else
            {
                board[i][j]=0;
                // WE BACKTRACT (REMOVE THE QUEEN)
            }
            }
        }
        return false;
    }
}
int main() 
{
    int n;
    cin >> n;
    int board[100][100];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            board[i][j]=0;
        }
    }
    solveNQueens(board,0,n);
	return 0;
}
